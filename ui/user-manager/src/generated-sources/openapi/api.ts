/* tslint:disable */
/* eslint-disable */
/**
 * User Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The specified content was not found.
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * 
     * @type {string}
     * @memberof BadRequestError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof BadRequestError
     */
    'code': number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof BadRequestError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * 
 * @export
 * @interface FamilyId
 */
export interface FamilyId {
    /**
     * 
     * @type {string}
     * @memberof FamilyId
     */
    'familyId'?: string;
}
/**
 * User does not have the appropriate permissions to access this endpoint.
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
    /**
     * 
     * @type {string}
     * @memberof ForbiddenError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ForbiddenError
     */
    'code': number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof ForbiddenError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * Unhandled internal server error has occurred.
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof InternalServerError
     */
    'code': number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof InternalServerError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * 
 * @export
 * @interface InternalServerErrorErrors
 */
export interface InternalServerErrorErrors {
    /**
     * 
     * @type {number}
     * @memberof InternalServerErrorErrors
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorErrors
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorErrors
     */
    'message': string;
}
/**
 * The specified content was not found.
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     * 
     * @type {string}
     * @memberof NotFoundError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof NotFoundError
     */
    'code': number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof NotFoundError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * User must be authenticated in order to access this endpoint.
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof UnauthorizedError
     */
    'code': number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof UnauthorizedError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * A unique identifier
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * Display name of the user
     * @type {string}
     * @memberof User
     */
    'displayName': string;
    /**
     * First name
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * First name
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * Email ID of user
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * Indicates whether the user is approved in the system
     * @type {boolean}
     * @memberof User
     */
    'isApproved'?: boolean;
}
/**
 * 
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * A unique identifier
     * @type {string}
     * @memberof UserData
     */
    'id'?: string;
    /**
     * Family ID to which user belongs to
     * @type {string}
     * @memberof UserData
     */
    'familyId'?: string;
    /**
     * Display name of the user
     * @type {string}
     * @memberof UserData
     */
    'displayName'?: string;
    /**
     * First name
     * @type {string}
     * @memberof UserData
     */
    'firstName': string;
    /**
     * First name
     * @type {string}
     * @memberof UserData
     */
    'lastName'?: string;
    /**
     * Email ID of user
     * @type {string}
     * @memberof UserData
     */
    'email': string;
    /**
     * Indicates primary user
     * @type {boolean}
     * @memberof UserData
     */
    'isPrimary': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'relation'?: UserDataRelationEnum;
    /**
     * Address Line 1
     * @type {string}
     * @memberof UserData
     */
    'addressLine1'?: string;
    /**
     * Address Line 2
     * @type {string}
     * @memberof UserData
     */
    'addressLine2'?: string;
    /**
     * City
     * @type {string}
     * @memberof UserData
     */
    'city'?: string;
    /**
     * Province
     * @type {string}
     * @memberof UserData
     */
    'province'?: UserDataProvinceEnum;
    /**
     * Postal Code
     * @type {string}
     * @memberof UserData
     */
    'postalCode'?: string;
}

export const UserDataRelationEnum = {
    Spouse: 'spouse',
    Child: 'child',
    Parent: 'parent',
    Grandparent: 'grandparent',
    Sibling: 'sibling',
    Other: 'other'
} as const;

export type UserDataRelationEnum = typeof UserDataRelationEnum[keyof typeof UserDataRelationEnum];
export const UserDataProvinceEnum = {
    Ab: 'AB',
    Bc: 'BC',
    Mb: 'MB',
    Nb: 'NB',
    Nl: 'NL',
    Nt: 'NT',
    Ns: 'NS',
    Nu: 'NU',
    True: 'true',
    Pe: 'PE',
    Qc: 'QC',
    Sk: 'SK',
    Yt: 'YT'
} as const;

export type UserDataProvinceEnum = typeof UserDataProvinceEnum[keyof typeof UserDataProvinceEnum];


/**
 * FamilyManagementApi - axios parameter creator
 * @export
 */
export const FamilyManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add/update user family details
         * @param {Array<UserData>} userData Array of family member user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpdateUserFamily: async (userData: Array<UserData>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userData' is not null or undefined
            assertParamExists('addUpdateUserFamily', 'userData', userData)
            const localVarPath = `/api/v1/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user family details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFamily: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamilyManagementApi - functional programming interface
 * @export
 */
export const FamilyManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamilyManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add/update user family details
         * @param {Array<UserData>} userData Array of family member user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUpdateUserFamily(userData: Array<UserData>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamilyId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUpdateUserFamily(userData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user family details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFamily(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFamily(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FamilyManagementApi - factory interface
 * @export
 */
export const FamilyManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamilyManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Add/update user family details
         * @param {Array<UserData>} userData Array of family member user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpdateUserFamily(userData: Array<UserData>, options?: any): AxiosPromise<FamilyId> {
            return localVarFp.addUpdateUserFamily(userData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user family details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFamily(options?: any): AxiosPromise<Array<UserData>> {
            return localVarFp.getUserFamily(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamilyManagementApi - object-oriented interface
 * @export
 * @class FamilyManagementApi
 * @extends {BaseAPI}
 */
export class FamilyManagementApi extends BaseAPI {
    /**
     * 
     * @summary Add/update user family details
     * @param {Array<UserData>} userData Array of family member user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyManagementApi
     */
    public addUpdateUserFamily(userData: Array<UserData>, options?: AxiosRequestConfig) {
        return FamilyManagementApiFp(this.configuration).addUpdateUserFamily(userData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user family details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyManagementApi
     */
    public getUserFamily(options?: AxiosRequestConfig) {
        return FamilyManagementApiFp(this.configuration).getUserFamily(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Provides user profile information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Provides user profile information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Provides user profile information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI {
    /**
     * 
     * @summary Provides user profile information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public getUser(options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }
}


