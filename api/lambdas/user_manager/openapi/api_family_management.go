/*
 * User Manager API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FamilyManagementApiController binds http requests to an api service and writes the service results to the http response
type FamilyManagementApiController struct {
	service      FamilyManagementApiServicer
	errorHandler ErrorHandler
}

// FamilyManagementApiOption for how the controller is set up.
type FamilyManagementApiOption func(*FamilyManagementApiController)

// WithFamilyManagementApiErrorHandler inject ErrorHandler into controller
func WithFamilyManagementApiErrorHandler(h ErrorHandler) FamilyManagementApiOption {
	return func(c *FamilyManagementApiController) {
		c.errorHandler = h
	}
}

// NewFamilyManagementApiController creates a default api controller
func NewFamilyManagementApiController(s FamilyManagementApiServicer, opts ...FamilyManagementApiOption) Router {
	controller := &FamilyManagementApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the FamilyManagementApiController
func (c *FamilyManagementApiController) Routes() Routes {
	return Routes{
		{
			"AddFamilyMembers",
			strings.ToUpper("Post"),
			"/api/v1/user/family",
			c.AddFamilyMembers,
		},
		{
			"DeleteFamilyMembers",
			strings.ToUpper("Delete"),
			"/api/v1/user/family",
			c.DeleteFamilyMembers,
		},
		{
			"GetUserFamily",
			strings.ToUpper("Get"),
			"/api/v1/user/family",
			c.GetUserFamily,
		},
		{
			"UpdateFamilyMember",
			strings.ToUpper("Put"),
			"/api/v1/user/family/{userId}",
			c.UpdateFamilyMember,
		},
	}
}

// AddFamilyMembers - Add family members
func (c *FamilyManagementApiController) AddFamilyMembers(w http.ResponseWriter, r *http.Request) {
	userDataParam := []UserData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userDataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range userDataParam {
		if err := AssertUserDataRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AddFamilyMembers(r.Context(), userDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteFamilyMembers - Delete family members
func (c *FamilyManagementApiController) DeleteFamilyMembers(w http.ResponseWriter, r *http.Request) {
	requestBodyParam := []string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteFamilyMembers(r.Context(), requestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUserFamily - Get user family details
func (c *FamilyManagementApiController) GetUserFamily(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUserFamily(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateFamilyMember - Update family member
func (c *FamilyManagementApiController) UpdateFamilyMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]

	userDataParam := UserData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userDataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserDataRequired(userDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateFamilyMember(r.Context(), userIdParam, userDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
