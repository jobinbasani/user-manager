/*
 * User Manager API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type BasicUserInfoList struct {
	Total int32 `json:"total"`

	Items []User `json:"items"`

	Next *string `json:"next"`
}

// AssertBasicUserInfoListRequired checks if the required fields are not zero-ed
func AssertBasicUserInfoListRequired(obj BasicUserInfoList) error {
	elements := map[string]interface{}{
		"total": obj.Total,
		"items": obj.Items,
		"next":  obj.Next,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertUserRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseBasicUserInfoListRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of BasicUserInfoList (e.g. [][]BasicUserInfoList), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBasicUserInfoListRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBasicUserInfoList, ok := obj.(BasicUserInfoList)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBasicUserInfoListRequired(aBasicUserInfoList)
	})
}
