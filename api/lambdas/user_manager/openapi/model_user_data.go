/*
 * User Manager API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type UserData struct {

	// A unique identifier
	Id string `json:"id,omitempty"`

	// Family ID to which user belongs to
	FamilyId string `json:"familyId,omitempty"`

	// Display name of the user
	DisplayName string `json:"displayName,omitempty"`

	// First name
	FirstName string `json:"firstName"`

	// First name
	LastName string `json:"lastName,omitempty"`

	// Email ID of user
	Email string `json:"email"`

	// Indicates primary user
	IsPrimary bool `json:"isPrimary,omitempty"`

	// Gender
	Gender string `json:"gender"`

	Relation string `json:"relation,omitempty"`

	MaritalStatus string `json:"maritalStatus,omitempty"`

	// Address Line 1
	AddressLine1 string `json:"addressLine1,omitempty"`

	// Address Line 2
	AddressLine2 string `json:"addressLine2,omitempty"`

	// City
	City string `json:"city,omitempty"`

	// Status in Canada
	CanadianStatus string `json:"canadianStatus,omitempty"`

	// Province
	Province string `json:"province,omitempty"`

	// Postal Code
	PostalCode string `json:"postalCode,omitempty"`
}

// AssertUserDataRequired checks if the required fields are not zero-ed
func AssertUserDataRequired(obj UserData) error {
	elements := map[string]interface{}{
		"firstName": obj.FirstName,
		"email":     obj.Email,
		"gender":    obj.Gender,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUserDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UserData (e.g. [][]UserData), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserDataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUserData, ok := obj.(UserData)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserDataRequired(aUserData)
	})
}
