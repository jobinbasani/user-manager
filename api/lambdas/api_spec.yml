openapi: '3.0.3'
info:
  title: User Manager API
  version: '1.0.1'
servers:
  - url: 'https://usermanager.aws.com'

security:
  - bearer: [ ]

paths:
  /api/v1/user/profile:
    get:
      operationId: getUser
      summary: Provides user profile information
      tags:
        - User Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/family:
    get:
      operationId: getUserFamily
      summary: Get user family details
      tags:
        - Family Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: addFamilyMembers
      summary: Add family members
      requestBody:
        description: Array of family members
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataArray'
      tags:
        - Family Management
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyId'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: deleteFamilyMembers
      summary: Delete family members
      requestBody:
        description: Array of family member id's
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringArray'
      tags:
        - Family Management
      responses:
        200:
          description: deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/family/{userId}:
    put:
      operationId: updateFamilyMember
      summary: Update family member
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      requestBody:
        description: Family member detail
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      tags:
        - Family Management
      responses:
        200:
          description: updated user's id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/admins:
    get:
      operationId: getAdmins
      summary: List of users with Admin access
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserInfoList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: addToAdminGroup
      summary: Add members to admin group
      requestBody:
        description: User id's of new members
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringArray'
      tags:
        - Admin
      responses:
        204:
          description: Added admins
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: removeFromAdminGroup
      summary: Remove members from admin group
      requestBody:
        description: User id's of members to be deleted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringArray'
      tags:
        - Admin
      responses:
        204:
          description: Removed admins
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/search/signedupusers:
    get:
      operationId: searchSignedUpUsers
      summary: Search signed up users by name or email
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: first name, last name or email
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserInfoList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/search/familymembers:
    get:
      operationId: searchFamilyMembers
      summary: Search family members by name or email
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: first name, last name or email
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserInfoList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/users:
    get:
      operationId: listUsers
      summary: List users in the system
      parameters:
        - in: query
          name: start
          schema:
            type: string
          required: false
          description: Start page token
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of results to be returned
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserInfoList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/download/users:
    get:
      operationId: downloadUsers
      summary: Download users in the system
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            text/csv:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="holyfamily_members.csv"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/carousel:
    post:
      operationId: addCarouselItem
      summary: Add an item to the carousel
      requestBody:
        description: Carousel item
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CarouselItemInput'
      tags:
        - Admin
      responses:
        204:
          description: Added carousel item
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/carousel/{carouselItemId}:
    delete:
      operationId: deleteCarouselItem
      summary: Delete an item from the carousel
      parameters:
        - name: carouselItemId
          description: The unique identifier for the carousel item.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Admin
      responses:
        204:
          description: Removed carousel item
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/images/backgrounds:
    post:
      operationId: addBackgroundImage
      summary: Add a background image
      requestBody:
        description: Background image
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
      tags:
        - Admin
      responses:
        204:
          description: Added carousel item
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: getBackgroundImages
      summary: Get list of background images
      tags:
        - Admin
      responses:
        200:
          description: Background images
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundImageItems'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/images/backgrounds/{backgroundImageItemId}:
    delete:
      operationId: deleteBackgroundImage
      summary: Delete an item from the backgrounds
      parameters:
        - name: backgroundImageItemId
          description: The unique identifier for the background image.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Admin
      responses:
        204:
          description: Removed background image
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/pages/{pageId}:
    post:
      operationId: addPageContent
      summary: Add content to a page
      parameters:
        - name: pageId
          description: The unique identifier for the page
          in: path
          required: true
          schema:
            type: string
            enum:
              - catechism
              - services
              - committee
              - homepage
              - history
              - location
      requestBody:
        description: Page content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageContent'
      tags:
        - Admin
      responses:
        204:
          description: Added content
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/pages/{pageId}/{contentId}:
    put:
      operationId: updatePageContent
      summary: Update page content
      parameters:
        - name: pageId
          description: The unique identifier for the page
          in: path
          required: true
          schema:
            type: string
            enum:
              - catechism
              - services
              - committee
              - homepage
              - history
              - location
        - name: contentId
          description: Unique identifier of the page content
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated page content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageContent'
      tags:
        - Admin
      responses:
        204:
          description: Set page content
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deletePageContent
      summary: Delete content of a page
      parameters:
        - name: pageId
          description: The unique identifier for the page
          in: path
          required: true
          schema:
            type: string
            enum:
              - catechism
              - services
              - committee
              - homepage
              - history
              - location
        - name: contentId
          description: Unique identifier of the page content
          in: path
          required: true
          schema:
            type: string
      tags:
        - Admin
      responses:
        204:
          description: Deleted content
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/public/carousel:
    get:
      operationId: getCarouselItems
      summary: Get carousel items
      security: []
      tags:
        - Public
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarouselItems'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/public/pages/{pageId}:
    get:
      operationId: getPageContents
      summary: Get page contents
      parameters:
        - name: pageId
          description: The unique identifier for the page
          in: path
          required: true
          schema:
            type: string
            enum:
              - catechism
              - services
              - committee
              - homepage
              - history
              - location
      tags:
        - Public
      responses:
        200:
          description: Page contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContents'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: the server received and understood the request, but it was semantically invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: authentication credentials were required but not submitted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: the request was denied based on access policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: the requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    InternalServerError:
      description: the server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
  parameters:
    UserIdPathParam:
      name: userId
      description: The globally unique identifier for the user.
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: 00000000-0000-0000-0000-000000000001
  securitySchemes:
    bearer: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  schemas:
    InternalServerError:
      type: object
      description: Unhandled internal server error has occurred.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    NotFoundError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    BadRequestError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    UnauthorizedError:
      type: object
      description: User must be authenticated in order to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    ForbiddenError:
      type: object
      description: User does not have the appropriate permissions to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    User:
      type: object
      required:
        - id
        - displayName
        - firstName
        - email
      properties:
        id:
          description: A unique identifier
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: First name
        email:
          type: string
          description: Email ID of user
        isApproved:
          type: boolean
          description: Indicates whether the user is approved in the system

    UserData:
      type: object
      required:
        - firstName
        - lastName
        - email
        - gender
        - dateOfBirth
      properties:
        id:
          description: A unique identifier
          type: string
        familyId:
          description: Family ID to which user belongs to
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
          example: John
        middleName:
          type: string
          description: Middle name
        lastName:
          type: string
          description: First name
          example: Doe
        baptismalName:
          type: string
          description: Baptismal Name
        houseName:
          type: string
          description: House name
        familyUnit:
          type: string
          description: Family unit
        dateOfBirth:
          type: string
          description: Date of birth
        dateOfBaptism:
          type: string
          description: Date of baptism
        dateOfConfirmation:
          type: string
          description: Date of confirmation
        dateOfMarriage:
          type: string
          description: Date of marriage
        homeParish:
          type: string
          description: Home parish
        dioceseInIndia:
          type: string
          description: Diocese in India
        previousParishInCanada:
          type: string
          description: Previous Parish in Canada
        email:
          type: string
          description: Email ID of user
          example: john.doe@example.com
        isPrimary:
          type: boolean
          description: Indicates primary user
          example: true
        gender:
          type: string
          description: Gender
          enum:
            - male
            - female
        relation:
          type: string
          enum:
            - spouse
            - child
            - parent
            - grandParent
            - sibling
            - other
        maritalStatus:
          type: string
          enum:
            - single
            - married
            - widowed
            - separated
            - divorced
        apartment:
          type: string
          description: Apartment Number
        street:
          type: string
          description: Street number and name
        city:
          type: string
          description: City
        canadianStatus:
          type: string
          description: Status in Canada
          enum:
            - citizen
            - permanentResident
            - visitor
            - student
            - workPermit
          example: citizen
        inCanadaSince:
          type: string
          description: In Canada since
        profession:
          type: string
          description: Profession
        province:
          type: string
          enum:
            - AB
            - BC
            - MB
            - NB
            - NL
            - NT
            - NS
            - NU
            - "ON"
            - PE
            - QC
            - SK
            - YT
          description: Province
          example: NS
        postalCode:
          type: string
          description: Postal Code
          example: HOH OHO
        mobile:
          type: string
          description: Mobile number

    UserDataArray:
      type: array
      items:
        $ref: '#/components/schemas/UserData'

    BasicUserInfoList:
      type: object
      required:
        - total
        - items
        - next
      properties:
        total:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        next:
          type: string
          nullable: true

    StringArray:
      type: array
      items:
        type: string

    Announcements:
      type: array
      items:
        $ref: '#/components/schemas/Announcement'

    PageContent:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        subtitles:
          type: array
          items:
            type: string
        expiresOn:
          type: string
        html:
          type: string
          example: "<p>Content goes here!</p>"
        backgroundImage:
          type: string
          example: "/images/background.jpg"
        updatedBy:
          type: string
        updatedOn:
          type: string

    PageContents:
      type: array
      items:
        $ref: '#/components/schemas/PageContent'

    Location:
      type: object
      required:
        - address
        - latitude
        - longitude
        - apiKey
        - url
      properties:
        address:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        apiKey:
          type: string
        url:
          type: string

    CarouselItemInput:
      type: object
      required:
        - image
      properties:
        title:
          type: string
        subtitle:
          type: string
        image:
          type: string
          format: binary

    CarouselItem:
      type: object
      required:
        - id
        - url
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        subtitle:
          type: string
        url:
          type: string

    CarouselItems:
      type: array
      items:
        $ref: '#/components/schemas/CarouselItem'

    BackgroundImageItem:
      type: object
      required:
        - id
        - src
      properties:
        id:
          type: string
          format: uuid
        src:
          type: string
        width:
          type: integer
        height:
          type: integer

    BackgroundImageItems:
      type: array
      items:
        $ref: '#/components/schemas/BackgroundImageItem'

    Announcement:
      type: object
      required:
        - id
        - title
        - description
        - createdOn
      properties:
        id:
          type: string
          description: Announcement ID
          example: 123e4567-e89b-12d3-a456-426614174000
        createdOn:
          type: string
          description: Date on which this announcement was created
        title:
          type: string
          description: Announcement title
          example: New Announcement
        subtitle:
          type: string
          description: Announcement subtitle
          example: Announcement short summary is here
        description:
          type: string
          description: Announcement details
          example: Announcement details are here - Lorem Ipsum
        expiresOn:
          type: string
          description: Day on which this announcement expires

    FamilyId:
      type: object
      properties:
        familyId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000

    UserId:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000

    AnnouncementId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
