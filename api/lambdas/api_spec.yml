openapi: '3.0.3'
info:
  title: User Manager API
  version: '1.0.1'
servers:
  - url: 'https://usermanager.aws.com'

security:
  - bearer: [ ]

paths:
  /api/v1/user/profile:
    get:
      operationId: getUser
      summary: Provides user profile information
      tags:
        - User Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/family:
    get:
      operationId: getUserFamily
      summary: Get user family details
      tags:
        - Family Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: addFamilyMembers
      summary: Add family members
      requestBody:
        description: Array of family members
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataArray'
      tags:
        - Family Management
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyId'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: deleteFamilyMembers
      summary: Delete family members
      requestBody:
        description: Array of family member id's
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringArray'
      tags:
        - Family Management
      responses:
        200:
          description: deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admins:
    get:
      operationId: getAdmins
      summary: List of users with Admin access
      tags:
        - Admin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicUserInfoList'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/admin/announcements:
    post:
      operationId: addAnnouncement
      summary: Add a new announcement
      requestBody:
        description: Announcement details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      tags:
        - Admin
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementId'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteAnnouncements
      summary: Delete announcements
      requestBody:
        description: Announcement id's to delete
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringArray'
      tags:
        - Admin
      responses:
        200:
          description: deleted id's
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/public/announcements:
    get:
      operationId: getAnnouncements
      summary: Get all announcements
      security: []
      tags:
        - Public
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcements'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: the server received and understood the request, but it was semantically invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: authentication credentials were required but not submitted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: the request was denied based on access policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: the requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    InternalServerError:
      description: the server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  securitySchemes:
    bearer: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  schemas:
    InternalServerError:
      type: object
      description: Unhandled internal server error has occurred.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    NotFoundError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    BadRequestError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    UnauthorizedError:
      type: object
      description: User must be authenticated in order to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    ForbiddenError:
      type: object
      description: User does not have the appropriate permissions to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    User:
      type: object
      required:
        - id
        - displayName
        - firstName
        - email
      properties:
        id:
          description: A unique identifier
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: First name
        email:
          type: string
          description: Email ID of user
        isApproved:
          type: boolean
          description: Indicates whether the user is approved in the system

    UserData:
      type: object
      required:
        - firstName
        - lastName
        - email
        - gender
        - dateOfBirth
      properties:
        id:
          description: A unique identifier
          type: string
        familyId:
          description: Family ID to which user belongs to
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
          example: John
        middleName:
          type: string
          description: Middle name
        lastName:
          type: string
          description: First name
          example: Doe
        baptismalName:
          type: string
          description: Baptismal Name
        houseName:
          type: string
          description: House name
        familyUnit:
          type: string
          description: Family unit
        dateOfBirth:
          type: string
          description: Date of birth
        dateOfBaptism:
          type: string
          description: Date of baptism
        dateOfConfirmation:
          type: string
          description: Date of confirmation
        homeParish:
          type: string
          description: Home parish
        dioceseInIndia:
          type: string
          description: Diocese in India
        previousParishInCanada:
          type: string
          description: Previous Parish in Canada
        email:
          type: string
          description: Email ID of user
          example: john.doe@example.com
        isPrimary:
          type: boolean
          description: Indicates primary user
          example: true
        gender:
          type: string
          description: Gender
          enum:
            - male
            - female
        relation:
          type: string
          enum:
            - spouse
            - child
            - parent
            - grandParent
            - sibling
            - other
        maritalStatus:
          type: string
          enum:
            - single
            - married
            - widowed
            - separated
            - divorced
        apartment:
          type: string
          description: Apartment Number
        street:
          type: string
          description: Street number and name
        city:
          type: string
          description: City
        canadianStatus:
          type: string
          description: Status in Canada
          enum:
            - citizen
            - permanentResident
            - visitor
            - student
            - workPermit
          example: citizen
        inCanadaSince:
          type: string
          description: In Canada since
        province:
          type: string
          enum:
            - AB
            - BC
            - MB
            - NB
            - NL
            - NT
            - NS
            - NU
            - "ON"
            - PE
            - QC
            - SK
            - YT
          description: Province
          example: NS
        postalCode:
          type: string
          description: Postal Code
          example: HOH OHO
        mobile:
          type: string
          description: Mobile number

    UserDataArray:
      type: array
      items:
        $ref: '#/components/schemas/UserData'

    BasicUserInfoList:
      type: object
      required:
        - total
        - items
      properties:
        total:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'

    StringArray:
      type: array
      items:
        type: string

    Announcements:
      type: array
      items:
        $ref: '#/components/schemas/Announcement'

    Announcement:
      type: object
      required:
        - id
        - title
        - description
        - createdOn
      properties:
        id:
          type: string
          description: Announcement ID
          example: 123e4567-e89b-12d3-a456-426614174000
        createdOn:
          type: string
          description: Date on which this announcement was created
        title:
          type: string
          description: Announcement title
          example: New Announcement
        subtitle:
          type: string
          description: Announcement subtitle
          example: Announcement short summary is here
        description:
          type: string
          description: Announcement details
          example: Announcement details are here - Lorem Ipsum
        expiresOn:
          type: string
          description: Day on which this announcement expires

    FamilyId:
      type: object
      properties:
        familyId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000

    AnnouncementId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
