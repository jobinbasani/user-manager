openapi: '3.0.3'
info:
  title: User Manager API
  version: '1.0.1'
servers:
  - url: 'https://usermanager.aws.com'

security:
  - bearer: [ ]

paths:
  /api/v1/user/profile:
    get:
      operationId: getUser
      summary: Provides user profile information
      tags:
        - User Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/user/family:
    get:
      operationId: getUserFamily
      summary: Get user family details
      tags:
        - Family Management
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataArray'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: addUpdateUserFamily
      summary: Add/update user family details
      requestBody:
        description: Array of family member user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataArray'
      tags:
        - Family Management
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyId'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'


components:
  responses:
    BadRequest:
      description: the server received and understood the request, but it was semantically invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: authentication credentials were required but not submitted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    Forbidden:
      description: the request was denied based on access policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    NotFound:
      description: the requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    InternalServerError:
      description: the server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  securitySchemes:
    bearer: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  schemas:
    InternalServerError:
      type: object
      description: Unhandled internal server error has occurred.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    NotFoundError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    BadRequestError:
      type: object
      description: The specified content was not found.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    UnauthorizedError:
      type: object
      description: User must be authenticated in order to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message

    ForbiddenError:
      type: object
      description: User does not have the appropriate permissions to access this endpoint.
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              field:
                type: string
              message:
                type: string
            required:
              - code
              - field
              - message
    User:
      type: object
      required:
        - id
        - displayName
        - firstName
        - email
      properties:
        id:
          description: A unique identifier
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: First name
        email:
          type: string
          description: Email ID of user
        isApproved:
          type: boolean
          description: Indicates whether the user is approved in the system

    UserData:
      type: object
      required:
        - firstName
        - email
        - isPrimary
      properties:
        id:
          description: A unique identifier
          type: string
        familyId:
          description: Family ID to which user belongs to
          type: string
        displayName:
          description: Display name of the user
          type: string
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: First name
          example: Doe
        email:
          type: string
          description: Email ID of user
          example: john.doe@example.com
        isPrimary:
          type: boolean
          description: Indicates primary user
          example: true
        relation:
          type: string
          enum:
            - spouse
            - child
            - parent
            - grandparent
            - sibling
            - other
        addressLine1:
          type: string
          description: Address Line 1
        addressLine2:
          type: string
          description: Address Line 2
        city:
          type: string
          description: City
        province:
          type: string
          enum:
            - AB
            - BC
            - MB
            - NB
            - NL
            - NT
            - NS
            - NU
            - ON
            - PE
            - QC
            - SK
            - YT
          description: Province
          example: NS
        postalCode:
          type: string
          description: Postal Code
          example: HOH OHO

    UserDataArray:
      type: array
      items:
        $ref: '#/components/schemas/UserData'

    FamilyId:
      type: object
      properties:
        familyId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
